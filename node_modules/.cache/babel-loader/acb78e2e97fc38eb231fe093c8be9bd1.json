{"ast":null,"code":"import _possibleConstructorReturn from \"/home/wilder/Documents/Projet/map-google/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/wilder/Documents/Projet/map-google/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/wilder/Documents/Projet/map-google/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/wilder/Documents/Projet/map-google/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/home/wilder/Documents/Projet/map-google/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wilder/Documents/Projet/map-google/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _jsxFileName = \"/home/wilder/Documents/Projet/map-google/src/App.js\";\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper, Polyline } from 'google-maps-react';\n\nvar MyMarker =\n/*#__PURE__*/\nfunction () {\n  function MyMarker(nom, lat, lng) {\n    _classCallCheck(this, MyMarker);\n\n    this.nom = \"\";\n    this.nom = nom;\n    this.lat = lat;\n    this.lng = lng;\n  }\n\n  _createClass(MyMarker, [{\n    key: \"distance\",\n    value: function distance(mk) {// renvoie la distance en mètres entre les deux marqueurs\n    }\n  }]);\n\n  return MyMarker;\n}();\n\nexport var GMaps =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GMaps, _Component);\n\n  function GMaps(props) {\n    var _this;\n\n    _classCallCheck(this, GMaps);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GMaps).call(this, props));\n    _this.mk = [];\n\n    _this.mk.push(new MyMarker(\"Capitole\", 43.604409, 1.443416));\n\n    _this.state = {\n      nbmk: 1\n    };\n    _this.mapClicked = _this.mapClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GMaps, [{\n    key: \"mapClicked\",\n    value: function mapClicked(p1, p2, clickEvent) {\n      var latLng = clickEvent.latLng;\n      var lat = latLng.lat();\n      var lng = latLng.lng();\n      this.mk.push(new MyMarker(\"Nouveau\", lat, lng));\n      this.setState({\n        nbmk: this.mk.length\n      });\n      console.log(p1, p2, clickEvent);\n    }\n  }, {\n    key: \"moveMarker\",\n    value: function moveMarker(marker, map, clickEvent) {\n      var latLng = clickEvent.latLng;\n      var lat = latLng.lat();\n      var lng = latLng.lng();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var rows = [];\n\n      for (var i = 0; i < this.mk.length; i++) {\n        rows.push(React.createElement(Marker, {\n          draggable: true,\n          id: i,\n          title: this.mk[i].nom,\n          position: {\n            lat: this.mk[i].lat,\n            lng: this.mk[i].lng\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(Map, {\n        google: this.props.google,\n        initialCenter: {\n          lat: 43.5999,\n          lng: 1.443239\n        },\n        fullscreenControl: false,\n        streetViewControl: false,\n        zoom: 16,\n        onClick: this.mapClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, rows, React.createElement(Polyline, {\n        path: row,\n        geodesic: true,\n        options: {\n          strokeColor: \"#ff2527\",\n          strokeOpacity: 0.75,\n          strokeWeight: 2,\n          icons: [{\n            icon: lineSymbol,\n            offset: \"0\",\n            repeat: \"20px\"\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GMaps;\n}(Component);\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA3Gsj08QzmXalEyHuuHgnzNKk4dGS6i84\"\n})(GMaps);","map":{"version":3,"sources":["/home/wilder/Documents/Projet/map-google/src/App.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","Polyline","MyMarker","nom","lat","lng","mk","GMaps","props","push","state","nbmk","mapClicked","bind","p1","p2","clickEvent","latLng","setState","length","console","log","marker","map","rows","i","google","row","strokeColor","strokeOpacity","strokeWeight","icons","icon","lineSymbol","offset","repeat","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport {Map, InfoWindow, Marker, GoogleApiWrapper, Polyline} from 'google-maps-react';\n\nclass MyMarker {\n    nom=\"\";\n\n    constructor(nom,lat,lng){\n        this.nom=nom;\n        this.lat=lat;\n        this.lng=lng;\n    }\n    distance(mk) {\n        // renvoie la distance en mètres entre les deux marqueurs\n    }\n}\n\n\nexport class GMaps extends Component {\n\n    constructor(props) {\n        super(props);\n        this.mk=[];\n        this.mk.push(new MyMarker(\"Capitole\",43.604409,1.443416));\n        this.state={nbmk:1};\n        this.mapClicked=this.mapClicked.bind(this);\n    }\n    mapClicked(p1, p2, clickEvent) {\n        const { latLng } = clickEvent;\n        const lat = latLng.lat();\n        const lng = latLng.lng();\n        this.mk.push(new MyMarker(\"Nouveau\",lat,lng));\n        this.setState({nbmk:this.mk.length});\n      console.log(p1, p2,clickEvent)\n    }\n\n    moveMarker(marker,map,clickEvent) {\n        const { latLng } = clickEvent;\n        const lat = latLng.lat();\n        const lng = latLng.lng();\n\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < this.mk.length; i++)\n            rows.push(<Marker draggable={true} id={i} title={this.mk[i].nom} position={{lat:this.mk[i].lat,lng:this.mk[i].lng} }  />);\n\n        return (\n            <Map\n                google={this.props.google}\n                initialCenter={{\n                    lat: 43.5999,\n                    lng: 1.443239\n                }}\n                fullscreenControl={false}\n                streetViewControl={false}\n                zoom={16}\n                onClick={this.mapClicked}\n            >\n                {rows}\n                <Polyline\n                path={row}\n                geodesic={true}\n                options={{\n                    strokeColor: \"#ff2527\",\n                    strokeOpacity: 0.75,\n                    strokeWeight: 2,\n                    icons: [\n                        {\n                            icon: lineSymbol,\n                            offset: \"0\",\n                            repeat: \"20px\"\n                        }\n                    ]\n                }}\n                />\n              \n            </Map>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey : \"AIzaSyA3Gsj08QzmXalEyHuuHgnzNKk4dGS6i84\"\n})(GMaps)"]},"metadata":{},"sourceType":"module"}