{"ast":null,"code":"import _classCallCheck from \"/home/wilder/Documents/Projet/googlemap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wilder/Documents/Projet/googlemap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/wilder/Documents/Projet/googlemap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/wilder/Documents/Projet/googlemap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/wilder/Documents/Projet/googlemap/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/wilder/Documents/Projet/googlemap/src/itin\\xE9raire.js\";\nimport React from 'react';\nimport { toGeoJSON } from '@mapbox/polyline';\nvar apiKey = \"AIzaSyA3Gsj08QzmXalEyHuuHgnzNKk4dGS6i84\";\n\nvar polyline = require('@mapbox/polyline'); // necessite 'npm install @mapbox/polyline'\n\n\nvar Itineraire =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Itineraire, _React$Component);\n\n  function Itineraire(props) {\n    var _this;\n\n    _classCallCheck(this, Itineraire);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Itineraire).call(this, props));\n\n    _this.getPosition = function (e) {\n      e.preventDefault();\n      var origin = _this.props.origin;\n      var destination = _this.props.destination;\n      console.log(marker, 'mk');\n\n      if (marker.length >= 1) {\n        var lat = marker[0].lat;\n        var lng = marker[0].lng;\n        var latO = marker[marker.length - 1].lat;\n        var lngO = marker[marker.length - 1].lng;\n        fetch(\"https://maps.googleapis.com/maps/api/directions/json?origin=\".concat(latO, \",\").concat(lngO, \"&destination=\").concat(lat, \",\").concat(lng, \"&key=\").concat(apiKey, \"&mode=\").concat(_this.state.selected)).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          _this.setState({\n            distance: data.routes[0].legs[0].distance.text\n          });\n\n          var decode = polyline.decode(data.routes[0].overview_polyline.points);\n          console.log(decode);\n\n          _this.props.tracerItin(decode);\n        });\n      }\n    };\n\n    _this.test = function () {\n      _this.state({\n        selected: 'bycycling'\n      });\n\n      _this.position();\n    };\n\n    _this.state = {\n      distance: null,\n      selected: 'driving'\n    };\n    return _this;\n  }\n\n  _createClass(Itineraire, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" la Distance entre ces deux points est de \", this.state.distance, \" \"), React.createElement(\"form\", {\n        onChange: this.getPosition,\n        onSubmit: this.getPosition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        id: \"driving\",\n        name: \"driving\",\n        value: \"driving\",\n        checked: this.state.selected === 'driving',\n        onChange: function onChange(e) {\n          return _this2.setState({\n            selected: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), \"driving\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        id: \"walking\",\n        name: \"myRadio\",\n        value: \"walking\",\n        checked: this.state.selected === 'walking',\n        onChange: function onChange(e) {\n          return _this2.setState({\n            selected: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), \"walking\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        id: \"bycycling\",\n        name: \"myRadio\",\n        value: \"bycycling\",\n        checked: this.state.selected === 'bycycling',\n        onChange: function onChange(e) {\n          return _this2.setState({\n            selected: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), \"Bicycling\"), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"test new position\")));\n    }\n  }]);\n\n  return Itineraire;\n}(React.Component);\n\nexport { Itineraire as default };","map":{"version":3,"sources":["/home/wilder/Documents/Projet/googlemap/src/itinÃ©raire.js"],"names":["React","toGeoJSON","apiKey","polyline","require","Itineraire","props","getPosition","e","preventDefault","origin","destination","console","log","marker","length","lat","lng","latO","lngO","fetch","state","selected","then","res","json","data","setState","distance","routes","legs","text","decode","overview_polyline","points","tracerItin","test","position","color","target","value","Component"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,IAAMC,MAAM,GAAE,yCAAd;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB,C,CACA;;;IAGqBC,U;;;;;AACjB,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,oFAAMA,KAAN;;AADc,UAUlBC,WAVkB,GAUJ,UAACC,CAAD,EAAO;AACjBA,MAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,MAAM,GAAG,MAAKJ,KAAL,CAAWI,MAA1B;AACA,UAAMC,WAAW,GAAG,MAAKL,KAAL,CAAWK,WAA/B;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EAAoB,IAApB;;AACA,UAAIA,MAAM,CAACC,MAAP,IAAiB,CAArB,EAAuB;AAEnB,YAAMC,GAAG,GAAEF,MAAM,CAAC,CAAD,CAAN,CAAUE,GAArB;AACA,YAAMC,GAAG,GAAEH,MAAM,CAAC,CAAD,CAAN,CAAUG,GAArB;AAEA,YAAMC,IAAI,GAAGJ,MAAM,CAACA,MAAM,CAACC,MAAP,GAAgB,CAAjB,CAAN,CAA0BC,GAAvC;AACA,YAAMG,IAAI,GAAGL,MAAM,CAACA,MAAM,CAACC,MAAP,GAAgB,CAAjB,CAAN,CAA0BE,GAAvC;AAEAG,QAAAA,KAAK,uEAAgEF,IAAhE,cAAwEC,IAAxE,0BAA4FH,GAA5F,cAAmGC,GAAnG,kBAA8Gf,MAA9G,mBAA6H,MAAKmB,KAAL,CAAWC,QAAxI,EAAL,CACCC,IADD,CACM,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,SADT,EAECF,IAFD,CAEM,UAAAG,IAAI,EAAI;AAEV,gBAAKC,QAAL,CAAc;AAEVC,YAAAA,QAAQ,EAAEF,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,IAAf,CAAoB,CAApB,EAAuBF,QAAvB,CAAgCG;AAFhC,WAAd;;AAIA,cAAMC,MAAM,GAAG7B,QAAQ,CAAC6B,MAAT,CAAgBN,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeI,iBAAf,CAAiCC,MAAjD,CAAf;AACAtB,UAAAA,OAAO,CAACC,GAAR,CAAYmB,MAAZ;;AACA,gBAAK1B,KAAL,CAAW6B,UAAX,CAAsBH,MAAtB;AAEH,SAZD;AAcH;AAGJ,KA1CiB;;AAAA,UA4ClBI,IA5CkB,GA4CX,YAAM;AACT,YAAKf,KAAL,CAAW;AAACC,QAAAA,QAAQ,EAAC;AAAV,OAAX;;AACA,YAAKe,QAAL;AACH,KA/CiB;;AAEd,UAAKhB,KAAL,GAAY;AACRO,MAAAA,QAAQ,EAAE,IADF;AAERN,MAAAA,QAAQ,EAAE;AAFF,KAAZ;AAFc;AAMjB;;;;6BA4CO;AAAA;;AAEJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAI,QAAA,KAAK,EAAE;AAACgB,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAwE,KAAKjB,KAAL,CAAWO,QAAnF,MAFJ,EAGI;AAAM,QAAA,QAAQ,EAAE,KAAKrB,WAArB;AAAkC,QAAA,QAAQ,EAAE,KAAKA,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,EAAE,EAAC,SAAvB;AAAiC,QAAA,IAAI,EAAC,SAAtC;AAAgD,QAAA,KAAK,EAAC,SAAtD;AACJ,QAAA,OAAO,EAAE,KAAKc,KAAL,CAAWC,QAAX,KAAwB,SAD7B;AACwC,QAAA,QAAQ,EAAE,kBAACd,CAAD;AAAA,iBACtD,MAAI,CAACmB,QAAL,CAAc;AAAEL,YAAAA,QAAQ,EAAEd,CAAC,CAAC+B,MAAF,CAASC;AAArB,WAAd,CADsD;AAAA,SADlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,YADJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,EAAE,EAAC,SAAvB;AAAiC,QAAA,IAAI,EAAC,SAAtC;AAAgD,QAAA,KAAK,EAAC,SAAtD;AACC,QAAA,OAAO,EAAE,KAAKnB,KAAL,CAAWC,QAAX,KAAwB,SADlC;AAC6C,QAAA,QAAQ,EAAE,kBAACd,CAAD;AAAA,iBAAO,MAAI,CAACmB,QAAL,CAAc;AAAEL,YAAAA,QAAQ,EAAEd,CAAC,CAAC+B,MAAF,CAASC;AAArB,WAAd,CAAP;AAAA,SADvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,YATJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,EAAE,EAAC,WAAvB;AAAmC,QAAA,IAAI,EAAC,SAAxC;AAAkD,QAAA,KAAK,EAAC,WAAxD;AACJ,QAAA,OAAO,EAAE,KAAKnB,KAAL,CAAWC,QAAX,KAAwB,WAD7B;AAC0C,QAAA,QAAQ,EAAE,kBAACd,CAAD;AAAA,iBAAO,MAAI,CAACmB,QAAL,CAAc;AAAEL,YAAAA,QAAQ,EAAEd,CAAC,CAAC+B,MAAF,CAASC;AAArB,WAAd,CAAP;AAAA,SADpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,cAdJ,EAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAnBJ,CAHJ,CADJ;AA6BH;;;;EAlFmCxC,KAAK,CAACyC,S;;SAAzBpC,U","sourcesContent":["\nimport React from 'react';\nimport { toGeoJSON } from '@mapbox/polyline';\n\nconst apiKey =\"AIzaSyA3Gsj08QzmXalEyHuuHgnzNKk4dGS6i84\"\nconst polyline = require('@mapbox/polyline')\n// necessite 'npm install @mapbox/polyline'\n\n\nexport default class Itineraire extends React.Component{\n    constructor(props){\n        super(props)\n        this.state= {\n            distance: null,\n            selected: 'driving'\n                }\n    }\n\n    \n\n    getPosition = (e) => {\n        e.preventDefault()\n \n        const origin = this.props.origin\n        const destination = this.props.destination\n\n        console.log(marker, 'mk')\n        if (marker.length >= 1){\n            \n            const lat= marker[0].lat\n            const lng= marker[0].lng\n\n            const latO = marker[marker.length - 1].lat\n            const lngO = marker[marker.length - 1].lng\n\n            fetch(`https://maps.googleapis.com/maps/api/directions/json?origin=${latO},${lngO}&destination=${lat},${lng}&key=${apiKey}&mode=${this.state.selected}`)\n            .then(res => res.json())\n            .then(data => {\n  \n                this.setState({\n                    \n                    distance: data.routes[0].legs[0].distance.text\n                })\n                const decode = polyline.decode(data.routes[0].overview_polyline.points)\n                console.log(decode)\n                this.props.tracerItin(decode)\n\n            })\n\n        }\n  \n   \n    }\n\n    test = () => {\n        this.state({selected:'bycycling'}) \n        this.position()\n    }\n\n\n    render(){\n\n        return(\n            <div>\n               \n                <h1 style={{color: 'white'}}> la Distance entre ces deux points est de {this.state.distance} </h1>\n                <form onChange={this.getPosition} onSubmit={this.getPosition}>\n                    <label>\n                    <input type='radio' id='driving' name='driving' value='driving'\n                checked={this.state.selected === 'driving'} onChange={(e) => \n                this.setState({ selected: e.target.value })\n                \n                } />\n                        driving\n                    </label>\n                    <label>\n                    <input type='radio' id='walking' name='myRadio' value='walking' \n                     checked={this.state.selected === 'walking'} onChange={(e) => this.setState({ selected: e.target.value })} />\n                        walking\n                    </label>\n                    <label>\n                    <input type='radio' id='bycycling' name='myRadio' value='bycycling' \n                checked={this.state.selected === 'bycycling'} onChange={(e) => this.setState({ selected: e.target.value })} />\n                        Bicycling\n                    </label>\n                    <button >test new position</button>\n  \n                </form>\n     \n            </div>\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}